// THIS FILE IS AUTO GENERATED BY `@BUTTERY/DOCS`. PLEASE DO NOT EDIT
import type { ButteryDocsGraph } from "@buttery/docs/types";
import { json } from "@remix-run/cloudflare";

const graph: ButteryDocsGraph = {
  "why-this": {
    title: "Introduction",
    content:
      'import {jsx as _jsx} from "react/jsx-runtime";\nfunction _createMdxContent(props) {\n  const _components = {\n    h1: "h1",\n    ...props.components\n  };\n  return _jsx(_components.h1, {\n    children: "Welcome!"\n  });\n}\nexport default function MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = props.components || ({});\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\n',
    pages: {}
  },
  welcome: {
    title: "Introduction",
    content:
      'import {jsx as _jsx} from "react/jsx-runtime";\nfunction _createMdxContent(props) {\n  const _components = {\n    h1: "h1",\n    ...props.components\n  };\n  return _jsx(_components.h1, {\n    children: "Welcome!"\n  });\n}\nexport default function MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = props.components || ({});\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\n',
    pages: {}
  },
  security: {
    title: "",
    content: "",
    pages: {
      "prevention-of-attacks": {
        title: "Prevention of Attacks",
        content:
          'import {Fragment as _Fragment, jsx as _jsx} from "react/jsx-runtime";\nfunction _createMdxContent(props) {\n  return _jsx(_Fragment, {});\n}\nexport default function MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = props.components || ({});\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\n',
        pages: {}
      },
      "overview-of-security": {
        title: "Overview of Security",
        content:
          'import {Fragment as _Fragment, jsx as _jsx} from "react/jsx-runtime";\nfunction _createMdxContent(props) {\n  return _jsx(_Fragment, {});\n}\nexport default function MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = props.components || ({});\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\n',
        pages: {}
      }
    }
  },
  index: {
    title: "Welcome",
    content:
      'import {jsx as _jsx} from "react/jsx-runtime";\nfunction _createMdxContent(props) {\n  const _components = {\n    h1: "h1",\n    ...props.components\n  };\n  return _jsx(_components.h1, {\n    children: "Welcome"\n  });\n}\nexport default function MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = props.components || ({});\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\n',
    pages: {}
  },
  "getting-started": {
    title: "",
    content: "",
    pages: {
      "quick-start-guide": {
        title: "Quick Start Guide",
        content:
          'import {jsx as _jsx} from "react/jsx-runtime";\nfunction _createMdxContent(props) {\n  const _components = {\n    h1: "h1",\n    ...props.components\n  };\n  return _jsx(_components.h1, {\n    children: "Quick Start Guide"\n  });\n}\nexport default function MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = props.components || ({});\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\n',
        pages: {}
      },
      introduction: {
        title: "Introduction",
        content:
          'import {jsx as _jsx} from "react/jsx-runtime";\nfunction _createMdxContent(props) {\n  const _components = {\n    h1: "h1",\n    ...props.components\n  };\n  return _jsx(_components.h1, {\n    children: "Introduction"\n  });\n}\nexport default function MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = props.components || ({});\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\n',
        pages: {
          "basic-components": {
            title: "Basic Components",
            content:
              'import {jsx as _jsx} from "react/jsx-runtime";\nfunction _createMdxContent(props) {\n  const _components = {\n    h1: "h1",\n    ...props.components\n  };\n  return _jsx(_components.h1, {\n    children: "Basic Components"\n  });\n}\nexport default function MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = props.components || ({});\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\n',
            pages: {}
          },
          "advanced-components": {
            title: "Advanced Components",
            content:
              'import {jsx as _jsx} from "react/jsx-runtime";\nfunction _createMdxContent(props) {\n  const _components = {\n    h1: "h1",\n    ...props.components\n  };\n  return _jsx(_components.h1, {\n    children: "Advanced Components"\n  });\n}\nexport default function MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = props.components || ({});\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\n',
            pages: {}
          }
        }
      }
    }
  }
};

/**
 * A loader that can either be imported as an alias and then re-exported
 * or straight up re-exported to be used in any route that only requires
 * the documentation graph
 */
export async function loader() {
  return json({ graph });
}

/**
 * A standalone function that fetches the graph from the loader that is defined
 * in this resource route.
 */
export async function getGraph(request: Request) {
  try {
    const requestURL = new URL(request.url);
    const res = await fetch(requestURL.origin.concat("/api/docs/graph"));
    const data = (await res.json()) as ButteryDocsGraph;
    return data;
  } catch (error) {
    throw new Response(
      `There was an error when trying to fetch the documentation graph: ${error}`,
      { status: 500 }
    );
  }
}
