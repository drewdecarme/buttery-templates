import type {
  SensorConsumableOut,
  SensorHumidity,
  SensorModel,
  SensorOccupancy,
  SensorOpenClose,
  SensorPeopleCounting,
  SensorPresence,
  SensorPressure,
  SensorPushButton,
  SensorTemperature,
  SensorVibration,
  SensorWaterLeak,
  WithId
} from "@machineq/models";

export type FloorIds = "CC_35" | "B41_1" | "B41_2" | "B41_3" | "B41_4";

export const floorCoordinateListMap: {
  [key in FloorIds]: Array<[number, number]>;
} = {
  CC_35: [
    [-75.168761805413169, 39.954679322022308],
    [-75.168707948745208, 39.954662146039333],
    [-75.168643805718261, 39.954652941934171],
    [-75.16857514116748, 39.954649127236905],
    [-75.16857514116748, 39.954649127236905]
  ],
  B41_1: [
    [-122.380765684449145, 37.651869261437696],
    [-122.380691278861065, 37.651865162433396],
    [-122.380481947445105, 37.651876088456852],
    [-122.380367834775313, 37.651871431980453],
    [-122.380369723049483, 37.651829203061396],
    [-122.380483341669361, 37.651835503939495],
    [-122.380516426577969, 37.651911682366098],
    [-122.380652078982507, 37.651915750518555],
    [-122.380631796572999, 37.651966776852902],
    [-122.38066947538546, 37.6519664571166],
    [-122.380707306162236, 37.651960780596198],
    [-122.380744132926822, 37.651990503530001],
    [-122.380764673890269, 37.651930420061603],
    [-122.380362126693797, 37.65204438392945],
    [-122.380421560453698, 37.652074406576745],
    [-122.380422852663997, 37.652028868814398],
    [-122.380497364383217, 37.652057994479449],
    [-122.380553643228069, 37.652056702087151],
    [-122.380293074470075, 37.651845348913149],
    [-122.38063483952638, 37.65185964283215],
    [-122.380884932428998, 37.651890476142995],
    [-122.38090186591721, 37.651953134974399],
    [-122.380883425131003, 37.651993364144801],
    [-122.380881668432608, 37.651920024934547],
    [-122.380919132157132, 37.65191597679425],
    [-122.380918997650568, 37.651986849915353],
    [-122.38039256215967, 37.651967393701796],
    [-122.380433401286552, 37.651968842656146],
    [-122.380473530306219, 37.6519576681874],
    [-122.380512506800997, 37.651961902873097],
    [-122.38059426141389, 37.651962040401102],
    [-122.380559948075671, 37.65184373334705]
  ],
  B41_2: [
    [-122.380882360587108, 37.652071183305054],
    [-122.380826645755604, 37.652067945331048],
    [-122.3807700284476, 37.652066379969895],
    [-122.380714337392703, 37.652063049721448],
    [-122.380543509574494, 37.652057027559906],
    [-122.380487788977078, 37.652053522499749],
    [-122.380431399236386, 37.65205222725065],
    [-122.380375704317984, 37.652048775819296],
    [-122.380814928049602, 37.65186826937105],
    [-122.380758636009503, 37.6518660190969],
    [-122.380701550602708, 37.65186342940445],
    [-122.380645450404913, 37.65186120877685],
    [-122.380550856436628, 37.651845027601603],
    [-122.380495139428291, 37.651841629255998],
    [-122.380437328577614, 37.651839954321851],
    [-122.380381130484864, 37.651849966627047],
    [-122.380666707490178, 37.652065697000047],
    [-122.380315126379486, 37.651817473289753],
    [-122.380314024159702, 37.651850987437996],
    [-122.380822993056498, 37.651925268560504],
    [-122.380388240774749, 37.651967468791398],
    [-122.38043081428097, 37.651943118353898],
    [-122.38048072172667, 37.651941115370548],
    [-122.380517830322191, 37.651989570349599],
    [-122.38062675607722, 37.651945204574851],
    [-122.380627578561501, 37.651920196109501],
    [-122.380659445093812, 37.651995592742352],
    [-122.380745254947499, 37.651957120845651],
    [-122.380700347705698, 37.651967761459701],
    [-122.380741652949325, 37.651926304945547],
    [-122.380680303125999, 37.652021408549643]
  ],
  B41_3: [
    [-122.380769803383359, 37.652066380019747],
    [-122.380714083183719, 37.652063022501551],
    [-122.380814006798914, 37.651868226018749],
    [-122.380757719544732, 37.651865988700948],
    [-122.380700201514713, 37.651863381975602],
    [-122.380644454117288, 37.6518611759263],
    [-122.380480607041846, 37.651940526015601],
    [-122.380432126572202, 37.651939501439145],
    [-122.380511754080672, 37.651836852054856],
    [-122.380455301751624, 37.651853683789753],
    [-122.380398604613816, 37.651850573673102],
    [-122.380341125173715, 37.651848257827297],
    [-122.380873964026193, 37.652074236333107],
    [-122.380817222601991, 37.652067653401545],
    [-122.380647991705047, 37.652061584371801],
    [-122.380497437371773, 37.652053803517404],
    [-122.38044093524752, 37.6520522304209],
    [-122.380384352234785, 37.652053120318556],
    [-122.380416611605455, 37.652010193375702],
    [-122.380292629367773, 37.65187620929855],
    [-122.380293438880713, 37.651851600609348],
    [-122.380294429100644, 37.651821498536194],
    [-122.380561118305991, 37.651837110678549],
    [-122.380559412562377, 37.651923715890398],
    [-122.380388240742263, 37.651967468871206],
    [-122.380822993184495, 37.6519252688337],
    [-122.380484490828991, 37.65198717839975],
    [-122.380517830287999, 37.651989570433756],
    [-122.380626049267761, 37.651976464614499],
    [-122.380659445047002, 37.651995592857503],
    [-122.380699907231019, 37.651981152863499],
    [-122.380701318791992, 37.651938232231402],
    [-122.380744321573246, 37.651985505887097],
    [-122.3807452550855, 37.651957121050003],
    [-122.380746689734821, 37.651926522522345]
  ],
  B41_4: [
    [-122.380769621111398, 37.652068997453895],
    [-122.380713910832867, 37.652066752563051],
    [-122.380544136816809, 37.652059335132151],
    [-122.380488471815141, 37.652056944775097],
    [-122.380431100810512, 37.652054795143002],
    [-122.380370711551564, 37.652052528112549],
    [-122.380814632953104, 37.651868450079547],
    [-122.380758016388725, 37.651866198135899],
    [-122.380700850158846, 37.65186383250095],
    [-122.380645099028357, 37.651861358928699],
    [-122.380551161224474, 37.651845167110899],
    [-122.380495409753536, 37.651841742189205],
    [-122.380358886709757, 37.651849196059402],
    [-122.380303259071852, 37.651846697464151],
    [-122.3808887685325, 37.652074096434902],
    [-122.380829242362552, 37.652071688861895],
    [-122.38066701958293, 37.652061944866396],
    [-122.380783144305667, 37.651971774759247],
    [-122.380743247726485, 37.651972860144497],
    [-122.380763609685005, 37.651927258200701],
    [-122.380823243079988, 37.651925486635406],
    [-122.380698301743195, 37.651971109777001],
    [-122.380699694472767, 37.651928852602097],
    [-122.380659629360196, 37.651995752477049],
    [-122.380625825633985, 37.651988630992804],
    [-122.380626519688491, 37.651967572502997],
    [-122.380626253897617, 37.651942370764701],
    [-122.380627039532968, 37.651918265064552],
    [-122.380517960001811, 37.651989682765901],
    [-122.380559561880489, 37.651923845290497],
    [-122.380479508254354, 37.651942592491096],
    [-122.380430286074656, 37.651923177273801],
    [-122.38039110334492, 37.651967657908351],
    [-122.38042592977888, 37.651886315639999],
    [-122.380427417777042, 37.6518411678353]
  ]
};

/**
 * Inquirer validator that validates the
 * date to be well formed.
 */
export const validateDate = (input: string) => {
  const regEx = /^\d{4}-\d{2}-\d{2}$/;
  if (!input.match(regEx))
    return "Invalid date format. Please enter a date with format (YYYY-MM-DD)"; // Invalid format
  const d = new Date(input);
  const dNum = d.getTime();
  if (!dNum && dNum !== 0) return false;
  ("Unable to parse date: Please enter a date with format (YYYY-MM-DD)"); // Invalid date NaN
  return d.toISOString().slice(0, 10) === input;
};

/**
 * Creates a random whole number between min and max
 * where min defaults to 0 and max defaults to 1
 */
export function createRandomNumber(params?: { min?: number; max?: number }) {
  const min = params?.min ?? 0;
  const max = params?.max ?? 1;

  return Math.floor(Math.random() * (max - min + 1)) + min;
}

export const createRandom0sOr1s = (): 0 | 1 =>
  createRandomNumber({ min: 0, max: 1 }) as 0 | 1;

export const exhaustiveMatchGuard = (_: never): never => {
  throw new Error("Forgot to include an option in the switch statement");
};

/**
 * Provided a list of sensors, this function
 * will loop through all of the sensors and create
 * random data for each of the sensor types. It will
 * return a single object that has all of the data inside
 * of it.
 */
export const createSensorData = (
  sensors: WithId<{
    device_id: number;
    sensor_model: WithId<SensorModel>;
  }>[]
) =>
  sensors.reduce((accum, sensor) => {
    switch (sensor.sensor_model.sensor_type) {
      case "CONSUMABLE_OUT": {
        const val: SensorConsumableOut["current_value"] = {
          consumableOut: createRandom0sOr1s()
        };
        return { ...accum, ...val };
      }

      case "HUMIDITY": {
        const val: SensorHumidity["current_value"] = {
          humidity: createRandomNumber({ min: 0, max: 100 })
        };
        return { ...accum, ...val };
      }

      case "PRESENCE":
      case "OCCUPANCY": {
        const val:
          | SensorOccupancy["current_value"]
          | SensorPresence["current_value"] = {
          occupancy: createRandom0sOr1s().toString().concat(".0") as
            | "0.0"
            | "1.0"
        };
        return { ...accum, ...val };
      }

      case "OPEN_CLOSE": {
        const val: SensorOpenClose["current_value"] = {
          doorWindowState: createRandom0sOr1s()
        };
        return { ...accum, ...val };
      }

      case "PEOPLE_COUNTING": {
        const val: SensorPeopleCounting["current_value"] = {
          people_counting: {
            total_counter_in: createRandomNumber({ max: 20 }),
            total_counter_out: createRandomNumber({ max: 20 }),
            periodic_counter_in: createRandomNumber({ max: 20 }),
            periodic_counter_out: createRandomNumber({ max: 20 })
          }
        };
        return { ...accum, ...val };
      }

      case "PRESSURE": {
        const val: SensorPressure["current_value"] = {
          pressure: createRandomNumber({ max: 10_000 })
        };
        return { ...accum, ...val };
      }

      case "PUSH_BUTTON": {
        const val: SensorPushButton["current_value"] = {
          buttonState: createRandom0sOr1s()
        };
        return { ...accum, ...val };
      }

      case "TEMPERATURE": {
        const val: SensorTemperature["current_value"] = {
          extTemp: createRandomNumber({ max: 212 }),
          temperature: createRandomNumber({ max: 212 })
        };
        return { ...accum, ...val };
      }

      case "VIBRATION": {
        const val: SensorVibration["current_value"] = {
          motionState: createRandom0sOr1s()
        };
        return { ...accum, ...val };
      }

      case "WATER_LEAK": {
        const val: SensorWaterLeak["current_value"] = {
          waterLeakState: createRandom0sOr1s()
        };
        return { ...accum, ...val };
      }

      case "LOCATION":
        return accum;

      default:
        return exhaustiveMatchGuard(sensor.sensor_model.sensor_type);
    }
  }, {});

export const convertDateToEpochTimestamp = (d: Date) => {
  const epochTimestampInMilliseconds = d.getTime();
  const epochTimestamp = Math.floor(epochTimestampInMilliseconds / 1000);
  return epochTimestamp;
};
